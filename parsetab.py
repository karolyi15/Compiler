
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIDCALLBEGINrightPROCEDURErightDECLARErightASSIGNrightUPDATEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENASSIGN BEGIN CALL COMMA COMMENT DECLARE DIVIDE END FOR ID IMPORT LPAREN MINUS NUMBER PLUS PROCEDURE RPAREN SEMMICOLOM TIMES UPDATEprogram : COMMENT blockblock : varAssign procedureDeclarevarAssign : DECLARE varAssignList SEMMICOLOM varAssignvarAssign : emptyvarAssignList : ID ASSIGN NUMBERvarAssignList : varAssignList COMMA ID ASSIGN NUMBERprocedureDeclare : PROCEDURE ID LPAREN RPAREN SEMMICOLOM procedureDeclareprocedureDeclare : emptystatement : CALL ID LPAREN RPAREN SEMMICOLOMstatement : BEGIN statementList END SEMMICOLOMstatement : emptystatementList : statement statementList : statementList SEMMICOLOM statement empty :'
    
_lr_action_items = {'COMMENT':([0,],[2,]),'$end':([1,2,3,4,6,7,9,13,17,22,24,],[0,-14,-1,-14,-4,-2,-8,-14,-3,-14,-7,]),'DECLARE':([2,13,],[5,5,]),'PROCEDURE':([2,4,6,13,17,22,],[-14,8,-4,-14,-3,8,]),'ID':([5,8,14,],[11,12,18,]),'SEMMICOLOM':([10,19,20,23,],[13,-5,22,-6,]),'COMMA':([10,19,23,],[14,-5,-6,]),'ASSIGN':([11,18,],[15,21,]),'LPAREN':([12,],[16,]),'NUMBER':([15,21,],[19,23,]),'RPAREN':([16,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([2,],[3,]),'varAssign':([2,13,],[4,17,]),'empty':([2,4,13,22,],[6,9,6,9,]),'procedureDeclare':([4,22,],[7,24,]),'varAssignList':([5,],[10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> COMMENT block','program',2,'p_program','SyntacticAnalisis.py',21),
  ('block -> varAssign procedureDeclare','block',2,'p_block1','SyntacticAnalisis.py',27),
  ('varAssign -> DECLARE varAssignList SEMMICOLOM varAssign','varAssign',4,'p_varAssingn1','SyntacticAnalisis.py',33),
  ('varAssign -> empty','varAssign',1,'p_varAssingn2','SyntacticAnalisis.py',37),
  ('varAssignList -> ID ASSIGN NUMBER','varAssignList',3,'p_varAssignList1','SyntacticAnalisis.py',43),
  ('varAssignList -> varAssignList COMMA ID ASSIGN NUMBER','varAssignList',5,'p_varAssignList2','SyntacticAnalisis.py',47),
  ('procedureDeclare -> PROCEDURE ID LPAREN RPAREN SEMMICOLOM procedureDeclare','procedureDeclare',6,'p_procedureDeclare1','SyntacticAnalisis.py',53),
  ('procedureDeclare -> empty','procedureDeclare',1,'p_procedureDeclare2','SyntacticAnalisis.py',57),
  ('statement -> CALL ID LPAREN RPAREN SEMMICOLOM','statement',5,'p_statement1','SyntacticAnalisis.py',63),
  ('statement -> BEGIN statementList END SEMMICOLOM','statement',4,'p_statement2','SyntacticAnalisis.py',67),
  ('statement -> empty','statement',1,'p_statement3','SyntacticAnalisis.py',71),
  ('statementList -> statement','statementList',1,'p_statementList1','SyntacticAnalisis.py',77),
  ('statementList -> statementList SEMMICOLOM statement','statementList',3,'p_statementList2','SyntacticAnalisis.py',81),
  ('empty -> <empty>','empty',0,'p_empty','SyntacticAnalisis.py',87),
]
