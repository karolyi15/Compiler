
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIDCALLBEGINrightPROCEDURErightDECLARErightASSIGNrightUPDATEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENASSIGN BEGIN CALL COMMA COMMENT DECLARE DIVIDE END FOR ID IMPORT LPAREN MINUS NUMBER PLUS PROCEDURE RPAREN SEMMICOLOM TIMES UPDATEprogram : COMMENT blockblock : importDeclare varAssign procedureDeclare statementimportDeclare : IMPORT importDeclareList SEMMICOLOM importDeclareimportDeclare : emptyimportDeclareList :  IDimportDeclareList : importDeclareList COMMA IDvarAssign : DECLARE varAssignList SEMMICOLOM varAssignvarAssign : emptyvarAssignList : ID ASSIGN NUMBERvarAssignList : varAssignList COMMA ID ASSIGN NUMBERprocedureDeclare : PROCEDURE ID LPAREN RPAREN statement SEMMICOLOM procedureDeclareprocedureDeclare : emptystatement : CALL ID LPAREN RPARENstatement : BEGIN statementList ENDstatement : emptystatementList : statement statementList : statementList SEMMICOLOM statement empty :'
    
_lr_action_items = {'COMMENT':([0,],[2,]),'$end':([1,2,3,4,6,7,9,12,14,17,19,22,24,27,33,37,41,45,46,],[0,-18,-1,-18,-4,-18,-8,-18,-12,-18,-2,-15,-18,-3,-7,-14,-13,-18,-11,]),'IMPORT':([2,17,],[5,5,]),'DECLARE':([2,4,6,17,24,27,],[-18,8,-4,-18,8,-3,]),'PROCEDURE':([2,4,6,7,9,17,24,27,33,45,],[-18,-18,-4,13,-8,-18,-18,-3,-7,13,]),'CALL':([2,4,6,7,9,12,14,17,21,24,27,33,38,39,45,46,],[-18,-18,-4,-18,-8,20,-12,-18,20,-18,-3,-7,20,20,-18,-11,]),'BEGIN':([2,4,6,7,9,12,14,17,21,24,27,33,38,39,45,46,],[-18,-18,-4,-18,-8,21,-12,-18,21,-18,-3,-7,21,21,-18,-11,]),'ID':([5,8,13,18,20,25,],[11,16,23,28,29,34,]),'SEMMICOLOM':([10,11,15,21,22,28,30,31,35,37,38,39,41,42,43,44,],[17,-5,24,-18,-15,-6,38,-16,-9,-14,-18,-18,-13,-17,45,-10,]),'COMMA':([10,11,15,28,35,44,],[18,-5,25,-6,-9,-10,]),'ASSIGN':([16,34,],[26,40,]),'END':([21,22,30,31,37,38,41,42,],[-18,-15,37,-16,-14,-18,-13,-17,]),'LPAREN':([23,29,],[32,36,]),'NUMBER':([26,40,],[35,44,]),'RPAREN':([32,36,],[39,41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([2,],[3,]),'importDeclare':([2,17,],[4,27,]),'empty':([2,4,7,12,17,21,24,38,39,45,],[6,9,14,22,6,22,9,22,22,14,]),'varAssign':([4,24,],[7,33,]),'importDeclareList':([5,],[10,]),'procedureDeclare':([7,45,],[12,46,]),'varAssignList':([8,],[15,]),'statement':([12,21,38,39,],[19,31,42,43,]),'statementList':([21,],[30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> COMMENT block','program',2,'p_program','SyntacticAnalisis.py',22),
  ('block -> importDeclare varAssign procedureDeclare statement','block',4,'p_block1','SyntacticAnalisis.py',28),
  ('importDeclare -> IMPORT importDeclareList SEMMICOLOM importDeclare','importDeclare',4,'p_importDeclare1','SyntacticAnalisis.py',32),
  ('importDeclare -> empty','importDeclare',1,'p_importDeclare2','SyntacticAnalisis.py',35),
  ('importDeclareList -> ID','importDeclareList',1,'p_imporDeclareList1','SyntacticAnalisis.py',38),
  ('importDeclareList -> importDeclareList COMMA ID','importDeclareList',3,'p_imporDecalreList2','SyntacticAnalisis.py',41),
  ('varAssign -> DECLARE varAssignList SEMMICOLOM varAssign','varAssign',4,'p_varAssingn1','SyntacticAnalisis.py',46),
  ('varAssign -> empty','varAssign',1,'p_varAssingn2','SyntacticAnalisis.py',50),
  ('varAssignList -> ID ASSIGN NUMBER','varAssignList',3,'p_varAssignList1','SyntacticAnalisis.py',56),
  ('varAssignList -> varAssignList COMMA ID ASSIGN NUMBER','varAssignList',5,'p_varAssignList2','SyntacticAnalisis.py',60),
  ('procedureDeclare -> PROCEDURE ID LPAREN RPAREN statement SEMMICOLOM procedureDeclare','procedureDeclare',7,'p_procedureDeclare1','SyntacticAnalisis.py',66),
  ('procedureDeclare -> empty','procedureDeclare',1,'p_procedureDeclare2','SyntacticAnalisis.py',70),
  ('statement -> CALL ID LPAREN RPAREN','statement',4,'p_statement1','SyntacticAnalisis.py',76),
  ('statement -> BEGIN statementList END','statement',3,'p_statement2','SyntacticAnalisis.py',80),
  ('statement -> empty','statement',1,'p_statement3','SyntacticAnalisis.py',84),
  ('statementList -> statement','statementList',1,'p_statementList1','SyntacticAnalisis.py',90),
  ('statementList -> statementList SEMMICOLOM statement','statementList',3,'p_statementList2','SyntacticAnalisis.py',94),
  ('empty -> <empty>','empty',0,'p_empty','SyntacticAnalisis.py',100),
]
